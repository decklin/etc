# The 0 key is to the right of 9 (...on *my* keyboard, at least), so use it
# for window 10 and start auto-numbering windows at 1.

set -g base-index 1
bind-key 0 select-window -t :10

# This seems like the best compromise for TERM. tmux-256color is the correct
# thing, but not all systems have it yet. If you need to override somewhere,
# check for this value and the existence of TMUX in your local shell config.

set -g default-terminal "screen-256color"

# Don't create login shells in panes. (On macOS, we really want this
# wrapper installed, or things like the pasteboard will not work.)

if-shell 'command -v reattach-to-user-namespace' \
    'set -g default-command "reattach-to-user-namespace $SHELL"' \
    'set -g default-command $SHELL'

# Fix meta key

set -g escape-time 10

# We don't need to display pane numbers for a full second

set -g display-panes-time 500

# We have enough memory for decent scrollback

set -g history-limit 10000

# Pick a less frequently-used key for prefix (if you're in tmux, how
# often do you need to background a process?)

set -g prefix C-z
bind-key z send-prefix

# I am too used to screen-style basic window switching here. But
# bouncing the prefix for last-window frees up l as a mnemonic for
# rotating layouts.

bind-key C-z last-window
bind-key Space next-window
bind-key l next-layout

# Default new behavior changed in 1.9. We'll use this arg everywhere.

bind-key c new-window -c "#{pane_current_path}"

# The control keys are free by default. I find it much easier on my
# wrists to leave the Control key depressed for purely-reflex actions
# (think C-x C-s in Emacs), so add these synonyms for frequently used
# bindings.

bind-key C-Space next-window
bind-key C-n next-window
bind-key C-p previous-window
bind-key C-l next-layout
bind-key C-c new-window -c "#{pane_current_path}"
bind-key C-d detach-client
bind-key C-w choose-window
bind-key C-o select-pane -t :.+

# On the same note, I find switching modifiers in the middle of a
# binding to be even more uncomfortable, so set up some more convenient
# splitting keys.

unbind-key '"'
unbind-key %

bind-key e split-window -h -c "#{pane_current_path}"
bind-key C-e split-window -h -c "#{pane_current_path}"
bind-key v split-window -v -c "#{pane_current_path}"
bind-key C-v split-window -v -c "#{pane_current_path}"

bind-key h copy-mode
bind-key C-h copy-mode

# Other stuff

bind-key -n Enter if -F "#{pane_dead}" respawn-pane "send-keys Enter"

bind-key j command-prompt "join-pane -t ':%%'"
bind-key C-j command-prompt "join-pane -t ':%%'"

bind-key m command-prompt -p "(man)" "split-window 'exec man %%'"
bind-key C-m command-prompt -p "(man)" "split-window 'exec man %%'"

# Colors, etc

set -g status-bg cyan
set -g status-fg default
set -g status-attr bold
set -g message-bg magenta
set -g message-fg default
set -g message-attr bright

set -g pane-border-bg default
set -g pane-border-fg green
set -g pane-active-border-bg default
set -g pane-active-border-fg blue

set-window-option -g window-status-current-bg blue
set-window-option -g window-status-current-fg magenta
set-window-option -g window-status-current-attr bold

set -g set-titles on
set -g status-left "[#S] "
set -g status-left-length 10
set -g status-left-style fg=blue,bold
set -g status-right " #{=20:pane_title} #[fg=blue,bold]%H:%M#[default]"
set -g status-right-length 27

# 6 chars is enough to hold "[tmux]" with brackets (for scrollback mode),
# and to distinguish emacs from emacsclient.

set -g window-status-current-format '#{window_index}:#{=6:window_name}#{window_flags}'
set -g window-status-format '#{window_index}:#{=6:window_name}#{window_flags}'
