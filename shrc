# Decklin's (mostly) portable shrc
#
# I should be able to drop this in whether I have ksh (preferred), ash
# (so just about any POSIX shell), or bash (many things here won't work
# as well as their incompatible improvements, but such is the way of all
# GNU software).

export FCEDIT=$EDITOR
export HISTFILE=$HOME/.sh_history
export HISTSIZE=9999

# System quirks and overrides

if [ "$BASH_VERSION" ]; then
    export POSIXLY_CORRECT=1
    export HISTFILE=$HOME/.bash_history
    _echo_esc='-e'
fi

case $TERM in
    midpssh|xterm-color|vt100*)
        export LANG=en_US.ISO-8859-1
        export LC_CTYPE=en_US.ISO-8859-1
        export LC_MESSAGES=en_US.ISO-8859-1
        export LC_MONETARY=en_US.ISO-8859-1
        export LC_NUMERIC=en_US.ISO-8859-1
        export LESSCHARSET=latin1
        export MANFMT=latin1
        ;;
esac

case $(uname) in
    *BSD)
        export CLICOLOR=1
        ;;
    Linux)
        export PAGER=less
        _ls_color=' --color'
        ;;
esac

# Fancy prompt. We only ever fork from PS1 once, assuming echo and kill
# are builtins. Everything else you want this for can be handled in cd()
# and some cleanup functions.

PS1='$_host:! ${PWD##?*/}$_branch $(_status $?)$_ps1c '
_host=$(hostname -s)
_ps1c=$(test $(id -u) = 0 && echo '#' || echo '$')
_status() {
    if [ $1 -gt 128 ]; then
        echo -n "SIG$(kill -l $(($1-128))) "
    elif [ $1 -gt 0 ]; then
        echo -n "$1 "
    fi
}

cd() {
    command cd "$@"
    _fixtitle
    _fixbranch
}
_title() {
    echo -n $_echo_esc "\033]0;$*\007"
}
_fixtitle() {
    case $TERM in
        rxvt*|xterm*|screen)
            _title "${USER:=$(id -un)}@${HOSTNAME:=$(hostname)}: $PWD"
            ;;
    esac
}
_fixbranch() {
    if [ "$(command hg id 2>/dev/null)" ]; then
        _branch=":$(command hg id -b):$(command hg id -n)"
    elif [ "$(command git rev-parse HEAD 2>/dev/null)" ]; then
        _ref=$(command git symbolic-ref HEAD 2>/dev/null)
        _branch=":${_ref#refs/heads/}"
    else
        unset _branch
    fi
}

for i in sh ash dash ksh mksh csh tcsh bash ssh vim screen mutt irssi hg git \
        dch; do
    eval "$i() { command $i \"\$@\"; _fixtitle; }";
done
for i in hg git; do
    eval "$i() { command $i \"\$@\"; _fixbranch; }"
done
unset i

# User aliases and functions

alias j=jobs
alias h='fc -l'
alias g='egrep -i'
alias gh='h 1 | g'
alias l="ls -hl$_ls_color"
alias ll="ls -hla$_ls_color"
alias la="ls -hlA$_ls_color"
alias lc="ls $_ls_color"
alias m=$PAGER

alias sr='screen -D -R'
alias duh='du -Dshx'
alias bcl='bc -lq'
alias mpn='mplayer -nosound'
alias muff='mutt -f'
alias my='mutt -y'
alias diffspy='pee diffstat colordiff | ${PAGER:-sensible-pager}'
alias glog='hg glog --style compact | ${PAGER:-sensible-pager}'
alias lsmp3="mp3info -r a -p '%8.2r %3m:%02s %f\n'"
alias na='normalize-audio'
alias rec44='rec -c 2 -s w -r 44100'
alias rot13="tr '[a-zA-Z]' '[n-za-mN-ZA-M]'"
alias vt='TERM=vt100wy LANG=C LC_ALL=C'
alias apt-yes-please="r 'apt-cache show'='sudo apt-get install'"

modhome() { chmod +w $HOME; "$@"; chmod -w $HOME; }

# Stuff that I keep forgetting I don't have on one system or the other

command -v par >/dev/null 2>&1 || par() { fmt "$@"; }
command -v seq >/dev/null 2>&1 || seq() { jot $(($2-$1+1)) $1; }

# Maybe override or add private settings

test -f $HOME/.shrc.local && . $HOME/.shrc.local

# And finally interactive-and-terminal-specific stuff

case "$-" in
    *i*)
        if [ -t 1 ]; then
            set -o emacs; _fixtitle; _fixbranch
            test -x /usr/games/fortune && /usr/games/fortune -sa
        fi
        ;;
esac
