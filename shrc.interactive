# This will only be sourced for an interactive shell with a terminal.

if test -n "$BASH_VERSION"; then
    set -o emacs
fi

# Make sure we have a working echo for PS1 stuff. If echo interprets -e,
# then it either requires it for backslash interpretation or eats it to
# appease broken implementations that do. Alternatively, we could define
# print in terms of echo, but then everything else would feel very
# ksh-centric.

if test "x$(command echo -e)" != 'x-e'; then
    echo() { command echo -e "$@"; }
fi

# If it doesn't interpret -n, then we are screwed, and must fall back to
# printf, which is in some cases not a builtin. But it works.

if test "x$(echo -n)" = 'x-n'; then
    echo() {
        local n=''
        if test "x$1" = 'x-n'; then shift; else n='\n'; fi
        printf "%b$n" "$*"
    }
fi

# AT&T ksh, pdksh et al, and bash all have different history formats.
# tcsh probably has yet another. To prevent corrupting files, only set
# a history file for known shells. KSH_VERSION is pdksh and friends;
# ksh93 does not provide a usable test since its ${.sh.version} causes
# an unredirectable substitution error everywhere else.
#
# We assume here (and later on) that any shell that does support saving
# history uses HISTFILE for the file name.

if test -n "$KSH_VERSION"; then
    HISTFILE=$HOME/.ksh_history
    _hist_last() { fc -l -1 2>/dev/null; }
    bind '^L=clear-screen'
elif test -n "$BASH_VERSION"; then
    HISTFILE=$HOME/.bash_history
    HISTCONTROL=ignoreboth
    _hist_last() { history 1; }
    shopt -s histappend
    bind -x '"\C-\M-l":clear; history -n; echo "[loaded history]"'
else
    unset HISTFILE
fi

if test -n "$HISTFILE"; then
    HISTSIZE=50000
    _hist_warn=45000
fi

# Fancy prompt. If we have a capable terminal the title will be reset
# every time; otherwise do nothing. In most directories this should not
# fork at all (assuming echo and kill are builtins). We only check the
# branch if cd'ing into the pwd found a supported VCS.

_hs_text='${_user}@${_host}:${_full_pwd}${_branch:+[$_branch]}'

if test -t 1; then
    _user=$(id -un)
    _host=$(hostname -s)

    case $TERM in
    rxvt*|xterm*|screen*)
        # For some reason we can't just use $(tput tsl) and $(tput fsl)
        # here. I don't remember why.
        _hs_on=$(echo -n '\033]0;')
        _hs_off=$(echo -n '\007')
        if test -n "$KSH_VERSION"; then
            _ign_enable="$(printf '\001\r')"
            _ign_on="$(printf '\001')"
            _ign_off="$(printf '\001')"
        elif test -n "$BASH_VERSION"; then
            _ign_on='\['
            _ign_off='\]'
        fi
        _hardstatus="${_ign_on}${_hs_on}${_hs_text}${_hs_off}${_ign_off}"
        # Colors work ok everywhere.
        _tput() { echo "${_ign_on}$(tput "$@")${_ign_off}"; }
        _color_red="$(_tput setaf 1)"
        _color_green="$(_tput setaf 2)"
        _color_yellow="$(_tput setaf 3)"
        _color_blue="$(_tput setaf 4)"
        _color_magenta="$(_tput setaf 5)"
        _color_cyan="$(_tput setaf 6)"
        _color_foo="$(_tput setaf 7)"
        _color_aoue="$(_tput setaf 8)"
        _color_def="$(_tput setaf 9)"
        _att_bold="$(_tput bold)"
        _att_reset="$(_tput sgr0)"
        ;;
    esac
fi

_ps_text='${_host}:${_pwd}${_branch:+[$_branch]}${_status:+ ${_status}!}${_hist_n:+ #${_hist_n}}'

# Note: _hist_magic is not actually used here but would be much more
# efficient if I always wanted to display the history number.

if test -n "$KSH_VERSION"; then
    _ps1='$(_update_status $?; eval echo "$_ps_text")'
    _user_glyph="$(test "$(id -u)" = 0 && echo '#' || echo '\$')"
    _hist_magic='!'
elif test -n "$BASH_VERSION"; then
    PROMPT_COMMAND='_update_status $?; history -a'
    _ps1="$_ps_text"
    _user_glyph='\$'
    _hist_magic='$HISTCMD'
fi

PS1="${_ign_enable}${_hardstatus}${_att_bold}${_ps1}${_att_reset} ${_color_cyan}${_user_glyph}${_color_def} ${_att_reset}"

cd() { command cd "$@" && _update_pwd && _update_branch; }
git() { command git "$@" && _update_branch; }
hg() { command hg "$@" && _update_branch; }

_update_pwd() {
    unset _vcs _branch
    if test -e .novcs; then
        _vcs=disabled
    elif test -d .hg || command hg id >/dev/null 2>&1; then
        _vcs=hg
    elif test -d .git || command git rev-parse HEAD >/dev/null 2>&1; then
        _vcs=git
    fi
    case "$PWD" in
        /)
            _pwd='/'
            _full_pwd='/'
            ;;
        "$HOME")
            _pwd='~'
            _full_pwd='~'
            ;;
        "$HOME"/*)
            _pwd="${PWD##*/}"
            _full_pwd="~${PWD#$HOME}"
            ;;
        *)
            _pwd="${PWD##*/}"
            _full_pwd="$PWD"
            ;;
    esac
}

_update_branch() {
    case "$_vcs" in
        hg)
            _branch="$(command hg id -b)@$(command hg id -n)"
            ;;
        git)
            local h="$(command git symbolic-ref -q HEAD)"
            if test -n "$h"; then
                _branch="${h##refs/heads/}"
            else
                h="$(command git describe --all --contains --always HEAD)"
                _branch="${h#remotes/}"
            fi
            ;;
        *)
            unset _branch
            ;;
    esac
}

_update_hist_n() {
    if test -n "$HISTFILE"; then
        local n=$(($(_hist_last | (read n cmd; echo "${n:-0}")) + 1))
        if test -n "$_hist_reloaded" -o "$n" -gt "$_hist_warn"; then
            _hist_n="$n"
        else
            _hist_n=''
        fi
    fi
}

_update_status() {
    if test "$1" -gt 128 -a "$1" -le 192; then
        _status="$(kill -l $(($1 & ~0x80)))"
    elif test "$1" != 0; then
        _status="$1"
    else
        _status=''
    fi
}

# ksh redefines this. Yuck. I can just use 'builtin rename' for the
# builtin.

_ren=$(which rename)
rename() { "$_ren" "$@"; };

# I sometimes run with an unwritable home dir to keep myself from
# littering it with useless files and programs from creating unapproved
# dotfiles. I have found lots of fun bugs this way.

modhome() { chmod +w "$HOME"; "$@"; chmod -w "$HOME"; }

# Crude approximations of stuff that I keep forgetting I don't have on
# one system or the other.

command -v par >/dev/null 2>&1 || par() { fmt "$@"; }
command -v seq >/dev/null 2>&1 || seq() { jot "${2:+$(($2-$1+1))}" "$1"; }

# Definitions end here; now actually set run a few things.

_update_pwd
_update_branch

test -e "$HOME/.fortune" -a -x /usr/games/fortune && /usr/games/fortune -s
